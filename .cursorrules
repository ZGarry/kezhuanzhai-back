<<本项目介绍>>
项目名称：齿轮
英文名：ChiLun
本项目是一个可转债投资分析和回测系统，包含后端分析引擎和前端可视化界面。

项目的主要功能包括：
可转债多因子回测
可转债数据市场情况查看
批量因子回测(待开发)
提供了程序回测和网页交互两种功能

技术栈-后端：
Python
Polars（数据处理）
FastAPI（API服务）
Matplotlib（图表生成）

前端：
Next.js
TypeScript
TailwindCSS
各种数据可视化组件

项目特点：
专注于可转债市场的分析和投资策略回测
可以自定义一切因子用于进行回测
提供完整的数据分析工具和可视化界面
<</本项目介绍>>

<<可转债数据分析与处理流程>>
main.py是程序的后端入口,
# 创建策略
strategy, config = create_strategy()
data_path = config.get('data_path', 'data/cb_data.pq')
策略里面需要把基本的数据，以及策略的内容提供出来。
一个基本的策略将包括,如下部分：
{
        "data_path": "data/cb_data.pq",
        "start_date": "2018-01-02",
        "end_date": "2024-12-31",
        "initial_capital": 1000000.0,
        "strategy_type": "custom",
        "top_n": 10,
        "name": "自定义策略",
        "output_dir": "results/custom",
        "strategy_params": {
            "indicators": ["close","conv_prem"],
            "weights": [-1.0, -1.0],
            "filters": {
                "left_years": [">", 0.5]
            }
        }
    }
也就是定义基础数据，名称的部分，以及策略的部分。

创建完毕策略后，会使用polars读取数据，
# 初始化数据
data_manager = DataManager(data_path)
data_manager.py负责管理全部数据。

然后可以进行回测。
strategy.run_backtest(data_manager, config)

回测的步骤也分为N个步骤。这个可以参考回测函数中的注释描述。
<</可转债数据分析与处理流程>>

<<前后端交互>>
API 服务器：
使用 FastAPI 实现的 api_server.py 为前端提供数据接口
提供可转债市场概览、分布数据、排名数据、回测结果等接口
Web 前端界面：
使用 Next.js 框架（TypeScript）开发的前端应用（CLong 目录）
前端页面页面逻辑都在app下，组件都在components下，lib负责工具函数逻辑，避免把复杂逻辑写到页面逻辑里。
<</前后端交互>>


